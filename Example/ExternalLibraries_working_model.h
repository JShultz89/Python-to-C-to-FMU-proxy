/* Simulation code for ExternalLibraries_working generated by the OpenModelica Compiler v1.9.3. */
/* States */
/* y */
#define _$Py(i) data->localData[i]->realVars[0]
#define $Py _$Py(0)
#define $P$PRE$Py data->simulationInfo.realVarsPre[0]
#define $P$ATTRIBUTE$Py data->modelData.realVarsData[0].attribute
#define $P$ATTRIBUTE$P$PRE$Py $P$ATTRIBUTE$Py
#define $Py__varInfo data->modelData.realVarsData[0].info
#define $P$PRE$Py__varInfo data->modelData.realVarsData[0].info
#define _$P$PRE$Py(i) $P$PRE$Py


/* StatesDerivatives */
/* der(y) */
#define _$P$DER$Py(i) data->localData[i]->realVars[1]
#define $P$DER$Py _$P$DER$Py(0)
#define $P$PRE$P$DER$Py data->simulationInfo.realVarsPre[1]
#define $P$ATTRIBUTE$P$DER$Py data->modelData.realVarsData[1].attribute
#define $P$ATTRIBUTE$P$PRE$P$DER$Py $P$ATTRIBUTE$P$DER$Py
#define $P$DER$Py__varInfo data->modelData.realVarsData[1].info
#define $P$PRE$P$DER$Py__varInfo data->modelData.realVarsData[1].info
#define _$P$PRE$P$DER$Py(i) $P$PRE$P$DER$Py


/* Non Discrete Real Algebraic Vars */

/* Discrete Real Algebraic Vars */

/* Nonlinear Constraints For Dyn. Optimization */

/* Nonlinear Final Constraints For Dyn. Optimization */

/* Algebraic Parameter */

/* External Objects */

/* Algebraic Integer Vars */

/* Algebraic Integer Parameter */

/* Algebraic Boolean Vars */

/* Algebraic Boolean Parameters */

/* Algebraic String Variables */

/* Algebraic String Parameter */

/* sample */

#define ExternalLibraries__working_ExternalFunc2_index 0

extern void ExternalLibraries_working_callExternalObjectConstructors(DATA *data, threadData_t *threadData);
extern void ExternalLibraries_working_callExternalObjectDestructors(DATA *_data, threadData_t *threadData);
extern void ExternalLibraries_working_initialNonLinearSystem(int nNonLinearSystems, NONLINEAR_SYSTEM_DATA *data);
extern void ExternalLibraries_working_initialLinearSystem(int nLinearSystems, LINEAR_SYSTEM_DATA *data);
extern void ExternalLibraries_working_initialMixedSystem(int nMixedSystems, MIXED_SYSTEM_DATA *data);
extern void ExternalLibraries_working_initializeStateSets(int nStateSets, STATE_SET_DATA* statesetData, DATA *data);
extern int ExternalLibraries_working_functionAlgebraics(DATA *data, threadData_t *threadData);
extern int ExternalLibraries_working_function_storeDelayed(DATA *data, threadData_t *threadData);
extern int ExternalLibraries_working_updateBoundVariableAttributes(DATA *data, threadData_t *threadData);
extern int ExternalLibraries_working_functionInitialEquations(DATA *data, threadData_t *threadData);
extern int ExternalLibraries_working_functionRemovedInitialEquations(DATA *data, threadData_t *threadData);
extern int ExternalLibraries_working_updateBoundParameters(DATA *data, threadData_t *threadData);
extern int ExternalLibraries_working_checkForAsserts(DATA *data, threadData_t *threadData);
extern int ExternalLibraries_working_function_ZeroCrossingsEquations(DATA *data, threadData_t *threadData);
extern int ExternalLibraries_working_function_ZeroCrossings(DATA *data, threadData_t *threadData, double* gout);
extern int ExternalLibraries_working_function_updateRelations(DATA *data, threadData_t *threadData, int evalZeroCross);
extern int ExternalLibraries_working_checkForDiscreteChanges(DATA *data, threadData_t *threadData);
extern const char* ExternalLibraries_working_zeroCrossingDescription(int i, int **out_EquationIndexes);
extern const char* ExternalLibraries_working_relationDescription(int i);
extern void ExternalLibraries_working_function_initSample(DATA *data, threadData_t *threadData);
extern int ExternalLibraries_working_initialAnalyticJacobianG(void* data, threadData_t *threadData);
extern int ExternalLibraries_working_initialAnalyticJacobianA(void* data, threadData_t *threadData);
extern int ExternalLibraries_working_initialAnalyticJacobianB(void* data, threadData_t *threadData);
extern int ExternalLibraries_working_initialAnalyticJacobianC(void* data, threadData_t *threadData);
extern int ExternalLibraries_working_initialAnalyticJacobianD(void* data, threadData_t *threadData);
extern int ExternalLibraries_working_functionJacG_column(void* data, threadData_t *threadData);
extern int ExternalLibraries_working_functionJacA_column(void* data, threadData_t *threadData);
extern int ExternalLibraries_working_functionJacB_column(void* data, threadData_t *threadData);
extern int ExternalLibraries_working_functionJacC_column(void* data, threadData_t *threadData);
extern int ExternalLibraries_working_functionJacD_column(void* data, threadData_t *threadData);
extern const char* ExternalLibraries_working_linear_model_frame(void);
extern int ExternalLibraries_working_mayer(DATA* data, modelica_real** res, short *);
extern int ExternalLibraries_working_lagrange(DATA* data, modelica_real** res, short *, short *);
extern int ExternalLibraries_working_pickUpBoundsForInputsInOptimization(DATA* data, modelica_real* min, modelica_real* max, modelica_real*nominal, modelica_boolean *useNominal, char ** name, modelica_real * start, modelica_real * startTimeOpt);
extern int ExternalLibraries_working_setInputData(DATA *data, const modelica_boolean file);
extern int ExternalLibraries_working_getTimeGrid(DATA *data, modelica_integer * nsi, modelica_real**t);
extern void ExternalLibraries_working_function_initSynchronous(DATA * data, threadData_t *threadData);
extern void ExternalLibraries_working_function_updateSynchronous(DATA * data, threadData_t *threadData, long i);
extern int ExternalLibraries_working_function_equationsSynchronous(DATA * data, threadData_t *threadData, long i);
extern void ExternalLibraries_working_function_savePreSynchronous(DATA *data, threadData_t *threadData);

